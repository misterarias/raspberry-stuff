{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Raspberry Stuff Collection of useful raspberry recipes","title":"Home"},{"location":"#raspberry-stuff","text":"Collection of useful raspberry recipes","title":"Raspberry Stuff"},{"location":"camera_setup/","text":"Raspbery as a webcam server ssh pi@$RASPBERRY_IP sudo apt-get update sudo apt-get install -y motion # Directory to save photos and streams mkdir /home/pi/Monitor sudo chgrp motion /home/pi/Monitor chmod g+rwx /home/pi/Monitor sudo vim /etc/motion/motion.conf # daemon on # stream_localhost off # target_dir /home/pi/Monitor # v4ld2_pallete 15 # ?? # width 640 # height 480 # framerate 10 sudo vim /etc/default/motion # start_motion_daemon yes # Enable via systemd sudo cat /lib/systemd/system/motion.service EOF [Unit] Description=Motion - WebCam control After=multi-user.target [Service] #KillMode=process #Restart=on-failure #RestartPreventExitStatus=255 ExecStart=/usr/bin/motion Type=idle [Install] WantedBy=multi-user.target Alias=motion.service EOF sudo systemctl daemon-reload sudo systemctl enable motion.service","title":"Raspbery as a webcam server"},{"location":"camera_setup/#raspbery-as-a-webcam-server","text":"ssh pi@$RASPBERRY_IP sudo apt-get update sudo apt-get install -y motion # Directory to save photos and streams mkdir /home/pi/Monitor sudo chgrp motion /home/pi/Monitor chmod g+rwx /home/pi/Monitor sudo vim /etc/motion/motion.conf # daemon on # stream_localhost off # target_dir /home/pi/Monitor # v4ld2_pallete 15 # ?? # width 640 # height 480 # framerate 10 sudo vim /etc/default/motion # start_motion_daemon yes # Enable via systemd sudo cat /lib/systemd/system/motion.service EOF [Unit] Description=Motion - WebCam control After=multi-user.target [Service] #KillMode=process #Restart=on-failure #RestartPreventExitStatus=255 ExecStart=/usr/bin/motion Type=idle [Install] WantedBy=multi-user.target Alias=motion.service EOF sudo systemctl daemon-reload sudo systemctl enable motion.service","title":"Raspbery as a webcam server"},{"location":"card_setup/","text":"Custom Raspbian image IMG_NAME=raspbian.img # GEt raspbian lite wget -O raspbian.gz https://downloads.raspberrypi.org/raspbian_lite_latest unzip raspbian.gz mv *-raspbian*.img $IMG_NAME # Mount it locally - using moount START=$(fdisk -l $IMG_NAME | grep ${IMG_NAME}2 | awk '{print $2}') sudo mkdir /mnt/raspbian sudo mount -o loop,offset=$(echo 512*${START} | bc) raspbian.img /mnt/raspbian # or using loop devices DEVICE=$(sudo losetup --find --partscan --show raspbian.img) lsblk $DEVICE sudo mount ${DEVICE}p2 -o rw /mnt/raspbian # Install QEMU and copy it inside sudo apt install -y binfmt-support qemu qemu-user-static sudo cp $(which qemu-arm-static) /mnt/raspbian/usr/bin/ # check sudo chroot /mnt/raspbian bin/bash $ uname -a $ raspi-config # enable ssh $ echo bebepi /etc/hostname $ ENCRYPTED_PASS=$(wpa_passphrase SSID PASSWORD ) $ cat /etc/wpa_supplicant/wpa_supplicant.conf EOF network { ssid= SSID psk= ${ENCRYPTED_PASS} ssid_scan=1 key_mgmt=WPA-PSK } EOF $ exit # after editing stuff sudo umount /mnt/raspbian sudo losetup -d ${DEVICE} # Burn the image (be careful with the of path) sudo umount /dev/sde1 sudo umount /dev/sde2 sudo dd if=$(pwd)/${IMG_NAME} of=/dev/sde status=progress bs=4M # Connect the SD to the raspberry, plug a cable, and ssh ssh pi@raspberrypi.local","title":"Custom Raspbian image"},{"location":"card_setup/#custom-raspbian-image","text":"IMG_NAME=raspbian.img # GEt raspbian lite wget -O raspbian.gz https://downloads.raspberrypi.org/raspbian_lite_latest unzip raspbian.gz mv *-raspbian*.img $IMG_NAME # Mount it locally - using moount START=$(fdisk -l $IMG_NAME | grep ${IMG_NAME}2 | awk '{print $2}') sudo mkdir /mnt/raspbian sudo mount -o loop,offset=$(echo 512*${START} | bc) raspbian.img /mnt/raspbian # or using loop devices DEVICE=$(sudo losetup --find --partscan --show raspbian.img) lsblk $DEVICE sudo mount ${DEVICE}p2 -o rw /mnt/raspbian # Install QEMU and copy it inside sudo apt install -y binfmt-support qemu qemu-user-static sudo cp $(which qemu-arm-static) /mnt/raspbian/usr/bin/ # check sudo chroot /mnt/raspbian bin/bash $ uname -a $ raspi-config # enable ssh $ echo bebepi /etc/hostname $ ENCRYPTED_PASS=$(wpa_passphrase SSID PASSWORD ) $ cat /etc/wpa_supplicant/wpa_supplicant.conf EOF network { ssid= SSID psk= ${ENCRYPTED_PASS} ssid_scan=1 key_mgmt=WPA-PSK } EOF $ exit # after editing stuff sudo umount /mnt/raspbian sudo losetup -d ${DEVICE} # Burn the image (be careful with the of path) sudo umount /dev/sde1 sudo umount /dev/sde2 sudo dd if=$(pwd)/${IMG_NAME} of=/dev/sde status=progress bs=4M # Connect the SD to the raspberry, plug a cable, and ssh ssh pi@raspberrypi.local","title":"Custom Raspbian image"},{"location":"passwordless_ssh_setup/","text":"SSH without password # First, generate new pair of keys locally ssh-keygen -b 2048 -f ~/.ssh/raspberry # Copy them to the raspberry using ssh ssh-copy-id -i ~/.ssh/raspberry.pub pi@bebepi # Profit!!","title":"SSH without password"},{"location":"passwordless_ssh_setup/#ssh-without-password","text":"# First, generate new pair of keys locally ssh-keygen -b 2048 -f ~/.ssh/raspberry # Copy them to the raspberry using ssh ssh-copy-id -i ~/.ssh/raspberry.pub pi@bebepi # Profit!!","title":"SSH without password"},{"location":"proxy_setup/","text":"Raspberry as a Proxy What's here? I explain how to set a Raspberry pi as a proxy for something that is served in it, in this case a motion server. I will also explain how to properly secure this, using: * a Let's Encrypt SSL certificate * Basic user and password * And security through obfuscation.","title":"Raspberry as a Proxy"},{"location":"proxy_setup/#raspberry-as-a-proxy","text":"","title":"Raspberry as a Proxy"},{"location":"proxy_setup/#whats-here","text":"I explain how to set a Raspberry pi as a proxy for something that is served in it, in this case a motion server. I will also explain how to properly secure this, using: * a Let's Encrypt SSL certificate * Basic user and password * And security through obfuscation.","title":"What's here?"}]}